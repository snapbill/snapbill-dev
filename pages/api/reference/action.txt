API Reference: Batch
===========

<section class="api-call" id="get" data-title="/get" markdown=1>
### /v1/action/*id*/get ###

Fetch an action and return the details

<!-- eval: action_id = self.fetch_single('action', 'id') -->
<pre>
<pre class="input">
    $ curl -u user:pass -d "" \
    >      https://api.snapbill.com/v1/action/<!-- action_id -->2829979/get.json
</pre><pre class="output">
%%json:examples/action.txt-1.json%
</pre>
</pre>
</section>

<section class="parameters" id="parameters" data-title="parameters">
### Parameter listing ###

%parameter-table

depth: get
  The depth parameter signals the amount of data for the action that was provided. depth=0 is the highest level that provides full detail.

id: get
    The id of the action in the system. This is guaranteed to be unique only over a single account.

xid: get
    The xid of the action in the system. This is guaranteed to be unique over all accounts (see [Concepts - Xid](/home/concepts/xid))

url: get
    %Deprecated% parameter, please use **path** instead.

path: get
    This is the path of the action. It is based on a url structure similar to the api design of snapbill which allows easy grouping of by type. See [action paths](#paths) for more detail.

link: get
    An %optional% link into SnapBill relating to the given action

item_type: get
    An %optional% field indicating the class of object this action was associated with if available.

description: get
    An english description explaining what change was made

details: get
    An object detailing the actual change that was made

client: get
    %Optional% object detailing the client that was involved in the action
    
user: get
    %Optional% object detailing the user that performed the action. This field is not included with actions performed by the system without user interaction.
    
{item_type}: get
    %Optional%. If item_type was provided and the action includes sufficient depth, then an object of that type will be included
    


%%%


</section>
