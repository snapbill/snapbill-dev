#!/usr/bin/env python

from collections import OrderedDict

import logging
import os.path
import re
import simplejson as json
import subprocess


class CurlChunkUpdater(object):
  previous = None

  def __init__(self, username, password, api_endpoint):
    self.log = logging.getLogger(__name__ + '.CurlChunkUpdater')
    self.username = username
    self.password = password
    self.api_endpoint = api_endpoint.strip('/')
    if 'http' not in self.api_endpoint:
      self.api_endpoint = 'https://' + self.api_endpoint
    self.domain = re.match(r'https?://[^.]+\.(.*)', self.api_endpoint).group(1)
    assert self.domain

  def update_response(self, obj):
    """Update values in a response to refer to a demo account and the
    snapbill.com website."""
    if isinstance(obj, OrderedDict):
      new_dict = OrderedDict()
      for key, val in obj.iteritems():
        new_dict[key] = self.update_response(val)
      return new_dict
    elif not isinstance(obj, basestring):
      return obj
    elif self.domain in obj:
      return obj \
          .replace('http:', 'https:') \
          .replace(self.domain, 'snapbill.com') \
          .replace('://%s.' % self.username, '://demo.')
    elif obj == self.username:
      return 'demo'
    else:
      return obj

  def _parse_curl_chunk(self, original_curl_cmd):
    'Parses the pretty formatted curl chunk into a single line command'
    curl_cmd = []
    for line in original_curl_cmd.splitlines():
      line = line.strip()
      if not line:
        continue

      assert line[0] in '$>'
      line = line[1:]

      if line.endswith('\\'):
        line = line[:-2]

      curl_cmd.extend(line.strip().split())
    # Make curl less noisy
    curl_cmd.insert(1, '-s')
    curl_cmd.insert(1, '-S')
    return ' '.join(curl_cmd)

  def _update_curl_cmd(self, original_curl_cmd, curl_cmd):
    'Update variables like username and password in the curl command'
    # check if the curl_cmd has everything we need in it
    assert 'user:pass' in curl_cmd
    assert 'https://api.snapbill.com/v1/' in curl_cmd

    # update the command
    curl_cmd = curl_cmd.replace('user:pass',
                                '%s:%s' % (self.username, self.password))
    curl_cmd = curl_cmd.replace('https://api.snapbill.com', self.api_endpoint)

    # Find any replacement comments
    def replaceVariables(string, full):
      def replace(string):
        var = string.group(1)
        if not var in self.data:
          raise Exception('Required variable "%s" not available' % var)

        if full:
          return '<!-- %s -->%s' % (var, self.data[var])
        else:
          return str(self.data[var])

      return re.sub(r'<!--\s+([a-z_]+)\s+-->([a-z0-9_:-]+)', replace, string)

    curl_cmd = replaceVariables(curl_cmd, False)
    original_curl_cmd = replaceVariables(original_curl_cmd, True)

    return (original_curl_cmd, curl_cmd)

  def _get_api_response(self, curl_cmd):
    'Hit the api and update URLS in the response'
    response = subprocess.check_output(curl_cmd, shell=True)
    try:
      response = json.loads(response, object_pairs_hook=OrderedDict)
    except json.decoder.JSONDecodeError:
      print("ERROR JSON decoding response:")
      print(response)
      print("\nFor request:")
      print(curl_cmd)
      exit(1)
    response = self.update_response(response)
    self.previous = response
    response = json.dumps(response, indent=2)
    response = '\n'.join('    ' + line for line in response.splitlines())
    return response

  def update_chunk(self, matchobj):
    eval_part = matchobj.group(1) if matchobj.group(1) else ''
    eval_var = matchobj.group(2)
    eval_str = matchobj.group(3)
    original_curl_cmd = matchobj.group(5)

    # Possibly run a command first
    if eval_var:
      self.data[eval_var] = eval(eval_str, globals(), locals())

    # Parse the curl cmd and get a response from the API
    curl_cmd = self._parse_curl_chunk(original_curl_cmd)
    original_curl_cmd, curl_cmd = self._update_curl_cmd(original_curl_cmd,
                                                        curl_cmd)
    response = self._get_api_response(curl_cmd)

    return ('%s<div class="input">%s</div><div class="output">\n%s\n</div>'
            % (eval_part, original_curl_cmd, response))

  def fetch_single(self, resource_type, field, post_vars=''):
    curl_cmd = 'curl -s -S -u %s:%s -d "%s" %s/v1/%s/list.json?perpage=1' \
        % (self.username, self.password, post_vars,
           self.api_endpoint, resource_type)
    response = subprocess.check_output(curl_cmd, shell=True)
    response = json.loads(response)
    if not response.get('list', []):
      print("ERROR there are no objects found for the resource type %s"
            % resource_type)
      exit(1)
    return response['list'][0][field]

  def update_curl_example(self, path, dryrun=False):
    self.log.debug('update_curl_example %s', path)
    with file(path) as fd:
      content = fd.read()

    self.data = {}
    regex = (r'(<!--\s+eval:\s+(\w+)\s*=\s*(.+?)\s+-->(.*?))?'
             r'<div class="input">(.*?)</div>\s*'
             r'(<div class="output">.*?</div>)?')
    new_content = re.sub(regex, self.update_chunk, content, flags=re.DOTALL)

    if content != new_content:
      print("Updating " + path)
      if not dryrun:
        with file(path, 'w') as fd:
          fd.write(new_content)


def main(path, username, password, api_endpoint, src=[], dryrun=False):
  updater = CurlChunkUpdater(username, password, api_endpoint)

  def visit(arg, dirname, names):
    for name in names:
      if name.endswith('.txt'):
        updater.update_curl_example('%s/%s' % (dirname, name), dryrun)

  if src:
    for path in src:
      updater.update_curl_example(os.path.abspath(path), dryrun)
  else:
    os.path.walk(path, visit, None)


if __name__ == '__main__':
  import argparse
  import sys

  pages_dir = os.path.abspath(os.path.dirname(sys.argv[0])) + '/pages'

  parser = argparse.ArgumentParser(description='Updates CURL API examples in '
                                   'the markdown files under the pages directory')
  parser.add_argument('src', nargs='*',
                      help='Specify specific files to process')
  parser.add_argument('--pagesdir', default=pages_dir,
                      help='The directory to process. Default %s' % pages_dir)
  parser.add_argument('--username', 
                      help='Username to use against the API endpoint')
  parser.add_argument('--password', default='correct',
                      help='Password to use against the API endpoint')
  parser.add_argument('--apiendpoint', default='http://api.snap',
                      help='The API endpoint to hit')
  parser.add_argument('--dryrun', default=False, action='store_true',
                      help="Don't update any files")
  parser.add_argument('--debug', default=False, action='store_true',
                      help="Enable DEBUG messages")
  args = parser.parse_args()

  if args.debug:
    logging.basicConfig(level=logging.DEBUG)

  if args.username:
    username = args.username
  else:
    print 'Reticulating splines...'
    output = subprocess.check_output(['b', 'random', 'api_account'])
    account = json.loads(output)
    username = account['username']

  print 'Generating API reference for %s...' % username
  main(args.pagesdir, username, args.password, args.apiendpoint,
       args.src, args.dryrun)
