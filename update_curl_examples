#!/usr/bin/env python

import json
import os.path
import re
import subprocess


class CurlChunkUpdater(object):

  def __init__(self, username, password, api_endpoint):
    self.username = username
    self.password = password
    self.api_endpoint = api_endpoint.strip('/')
    self.domain = re.match(r'https?://[^.]+\.(.*)', self.api_endpoint).group(1)
    assert self.domain

  def update_response(self, obj):
    if isinstance(obj, dict):
      new_dict = {}
      for key, val in obj.iteritems():
        new_dict[key] = self.update_response(val)
      return new_dict
    elif not isinstance(obj, basestring):
      return obj
    elif self.domain in obj:
      return obj \
          .replace('http:', 'https:') \
          .replace(self.domain, 'snapbill.com') \
          .replace('://%s.' % self.username, '://demo.')
    elif obj == self.username:
      return 'demo'
    else:
      return obj

  def update_chunk(self, matchobj):
    curl_cmd = []
    for line in matchobj.group(1).splitlines():
      line = line.strip()
      if not line:
        continue

      assert line[0] in '$>'
      line = line[1:]

      if line.endswith('\\'):
        line = line[:-2]

      curl_cmd.append(line.strip())
    curl_cmd = ' '.join(curl_cmd)

    # check if the curl_cmd has everything we need in it
    assert 'user:pass' in curl_cmd
    assert 'https://api.snapbill.com/v1/' in curl_cmd

    # update the command
    curl_cmd = curl_cmd.replace('user:pass',
                                '%s:%s' % (self.username, self.password))
    if 'http' in self.api_endpoint:
      curl_cmd = curl_cmd.replace('https://api.snapbill.com', self.api_endpoint)
    else:
      curl_cmd = curl_cmd.replace('api.snapbill.com', self.api_endpoint)

    # Hit the api and update URLS in the response
    response = subprocess.check_output(curl_cmd, shell=True)
    response = json.loads(response)
    response = self.update_response(response)
    response = json.dumps(response, indent=2)
    response = '\n'.join('    ' + line for line in response.splitlines())

    return ('<div class="input">%s</div><div class="output">\n%s\n</div>'
            % (matchobj.group(1), response))

  def update_curl_example(self, path):
    with file(path) as fd:
      content = fd.read()

    regex = r'<div class="input">(.*?)</div>\w*(<div class="output">.*?</div>)?'
    new_content = re.sub(regex, self.update_chunk, content, flags=re.DOTALL)

    if content != new_content:
      print "Updating", path
      with file(path, 'w') as fd:
        fd.write(new_content)


def main(path, username, password, api_endpoint):
  updater = CurlChunkUpdater(username, password, api_endpoint)

  def visit(arg, dirname, names):
    for name in names:
      if name.endswith('.txt'):
        updater.update_curl_example('%s/%s' % (dirname, name))

  os.path.walk(path, visit, None)


if __name__ == '__main__':
  import argparse
  import sys

  pages_dir = os.path.abspath(os.path.dirname(sys.argv[0])) + '/pages'

  parser = argparse.ArgumentParser(description='Updates CURL API examples in '
                                   'the markdown files under the pages directory')
  parser.add_argument('--pagesdir', default=pages_dir,
                      help='The directory to process. Default %s' % pages_dir)
  parser.add_argument('--username', required=True,
                      help='Username to use against the API endpoint')
  parser.add_argument('--password', required=True,
                      help='Password to use against the API endpoint')
  parser.add_argument('--apiendpoint', required=True,
                      help='The API endpoint to hit')
  args = parser.parse_args()

  main(args.pagesdir, args.username, args.password, args.apiendpoint)
