#!/usr/bin/env python

from collections import OrderedDict

import os.path
import re
import simplejson as json
import subprocess


class CurlChunkUpdater(object):

  def __init__(self, username, password, api_endpoint):
    self.username = username
    self.password = password
    self.api_endpoint = api_endpoint.strip('/')
    if 'http' not in self.api_endpoint:
      self.api_endpoint = 'https://' + self.api_endpoint
    self.domain = re.match(r'https?://[^.]+\.(.*)', self.api_endpoint).group(1)
    assert self.domain

  def update_response(self, obj):
    """Update values in a response to refer to a demo account and the
    snapbill.com website."""
    if isinstance(obj, OrderedDict):
      new_dict = OrderedDict()
      for key, val in obj.iteritems():
        new_dict[key] = self.update_response(val)
      return new_dict
    elif not isinstance(obj, basestring):
      return obj
    elif self.domain in obj:
      return obj \
          .replace('http:', 'https:') \
          .replace(self.domain, 'snapbill.com') \
          .replace('://%s.' % self.username, '://demo.')
    elif obj == self.username:
      return 'demo'
    else:
      return obj

  def update_chunk(self, matchobj):
    # Parse the curl command part into something we can pass to the command
    # line
    original_curl_cmd = matchobj.group(1)
    curl_cmd = []
    for line in original_curl_cmd.splitlines():
      line = line.strip()
      if not line:
        continue

      assert line[0] in '$>'
      line = line[1:]

      if line.endswith('\\'):
        line = line[:-2]

      curl_cmd.append(line.strip())
    curl_cmd = ' '.join(curl_cmd)

    # check if the curl_cmd has everything we need in it
    assert 'user:pass' in curl_cmd
    assert 'https://api.snapbill.com/v1/' in curl_cmd

    # update the command
    curl_cmd = curl_cmd.replace('user:pass',
                                '%s:%s' % (self.username, self.password))
    curl_cmd = curl_cmd.replace('https://api.snapbill.com', self.api_endpoint)

    # Possibly update any xids in the command
    if 'xid' in self.data:
      rep = '/%s/' % self.data['xid']
      curl_cmd = re.sub(r'/\w+:\w+/', rep, curl_cmd)
      original_curl_cmd = re.sub(r'/\w+:\w+/', rep, original_curl_cmd)

    # Hit the api and update URLS in the response
    response = subprocess.check_output(curl_cmd, shell=True)
    try:
      response = json.loads(response, object_pairs_hook=OrderedDict)
    except json.decoder.JSONDecodeError:
      print "ERROR JSON decoding response:"
      print response
      print "\nFor request:"
      print curl_cmd
      exit(1)
    response = self.update_response(response)
    response = json.dumps(response, indent=2)
    response = '\n'.join('    ' + line for line in response.splitlines())

    return ('<div class="input">%s</div><div class="output">\n%s\n</div>'
            % (original_curl_cmd, response))

  def fetch_single(self, resource_type):
    curl_cmd = 'curl -u %s:%s -d "" %s/v1/%s/list.json?perpage=1' \
        % (self.username, self.password, self.api_endpoint, resource_type)
    response = subprocess.check_output(curl_cmd, shell=True)
    response = json.loads(response)
    if not response.get('list', []):
      print "ERROR there are no %s" % resource_type
      exit(1)
    return response['list'][0]['xid']

  def update_curl_example(self, path):
    with file(path) as fd:
      content = fd.read()

    # First look for some evals
    self.data = {}
    regex = r'<!--\s+eval:\s+(\w+)\s*=\s*(.*)\s+-->\s*$'
    for match in re.finditer(regex, content, flags=re.MULTILINE):
      self.data[match.group(1)] = eval(match.group(2), globals(), locals())

    # Then actually run the examples
    regex = r'<div class="input">(.*?)</div>\s*(<div class="output">.*?</div>)?'
    new_content = re.sub(regex, self.update_chunk, content, flags=re.DOTALL)

    if content != new_content:
      print "Updating", path
      with file(path, 'w') as fd:
        fd.write(new_content)


def main(path, username, password, api_endpoint):
  updater = CurlChunkUpdater(username, password, api_endpoint)

  def visit(arg, dirname, names):
    for name in names:
      if name.endswith('.txt'):
        updater.update_curl_example('%s/%s' % (dirname, name))

  os.path.walk(path, visit, None)


if __name__ == '__main__':
  import argparse
  import sys

  pages_dir = os.path.abspath(os.path.dirname(sys.argv[0])) + '/pages'

  parser = argparse.ArgumentParser(description='Updates CURL API examples in '
                                   'the markdown files under the pages directory')
  parser.add_argument('--pagesdir', default=pages_dir,
                      help='The directory to process. Default %s' % pages_dir)
  parser.add_argument('--username', required=True,
                      help='Username to use against the API endpoint')
  parser.add_argument('--password', required=True,
                      help='Password to use against the API endpoint')
  parser.add_argument('--apiendpoint', required=True,
                      help='The API endpoint to hit')
  args = parser.parse_args()

  main(args.pagesdir, args.username, args.password, args.apiendpoint)
